import{d as b,c as a,o as r,F as l,B as x,b as _,j as e,w as k,a as c,t as u,H as E,k as p,e as d,G as h}from"./chunks/framework.BIxYopnG.js";const f=JSON.parse(`{"programs.mnw.aliases":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>Aliases to symlink nvim to.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  &quot;vi&quot;\\n  &quot;vim&quot;\\n]\\n</pre></code>"},"loc":["programs","mnw","aliases"],"readOnly":false,"type":"list of string"},"programs.mnw.appName":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>&quot;mnw&quot;</pre></code>"},"description":"<p>What to set $NVIM_APPNAME to</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>&quot;gerg&quot;</pre></code>"},"loc":["programs","mnw","appName"],"readOnly":false,"type":"string"},"programs.mnw.desktopEntry":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable neovim's desktop entry.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","desktopEntry"],"readOnly":false,"type":"boolean"},"programs.mnw.devExcludedPlugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>The same as 'plugins' except for when running in dev mode\\nadd the absolute paths to 'devPluginPaths'</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[ ./gerg ]\\n</pre></code>"},"loc":["programs","mnw","devExcludedPlugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.devPluginPaths":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>&quot;&quot;</pre></code>"},"description":"<p>The impure absolute paths to nvim plugins\\nthe relative paths of which should be in devExcludedPlugins</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  &quot;~/Projects/nvim-flake/gerg&quot;\\n]\\n</pre></code>"},"loc":["programs","mnw","devPluginPaths"],"readOnly":false,"type":"list of string"},"programs.mnw.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable mnw (Minimal Neovim Wrapper).</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.extraBinPath":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>Extra packages to be put in neovim's PATH</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  pkgs.rg\\n  pkgs.fzf\\n]\\n</pre></code>"},"loc":["programs","mnw","extraBinPath"],"readOnly":false,"type":"list of package"},"programs.mnw.extraLuaPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>ps: [ ]</pre></code>"},"description":"<p>A function which returns a list of extra needed lua packages</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>ps: [ ps.jsregexp ]\\n</pre></code>"},"loc":["programs","mnw","extraLuaPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.finalPackage":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"description":"<p>The final package to be consumed by the user</p>\\n","loc":["programs","mnw","finalPackage"],"readOnly":true,"type":"package"},"programs.mnw.initLua":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>&quot;&quot;</pre></code>"},"description":"<p>lua config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>&apos;&apos;\\n  require(&quot;myConfig&quot;)\\n&apos;&apos;</pre></code>"},"loc":["programs","mnw","initLua"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.initViml":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>&quot;&quot;</pre></code>"},"description":"<p>VimL config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>&apos;&apos;\\n  echomsg &apos;hello world&apos;\\n&apos;&apos;</pre></code>"},"loc":["programs","mnw","initViml"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.luaFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>lua config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  (pkgs.writeText &quot;init.lua&quot; &apos;&apos;\\n    print(&apos;hello world&apos;)\\n  &apos;&apos;)\\n]\\n</pre></code>"},"loc":["programs","mnw","luaFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.neovim":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.neovim-unwrapped</pre></code>"},"description":"<p>The neovim package to use. Must be unwrapped</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>inputs.neovim-nightly-overlay.packages.\${pkgs.stdenv.system}.default</pre></code>"},"loc":["programs","mnw","neovim"],"readOnly":false,"type":"package"},"programs.mnw.plugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of plugins to load</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  # you can pass vimPlugins from nixpkgs\\n  pkgs.vimPlugins.fzf-lua\\n\\n  # You can pass a directory\\n  # this is recommend for using your own\\n  # ftplugins and treesitter queries\\n  ./myNeovimConfig\\n\\n  {\\n    pname = &quot;customPlugin&quot;;\\n    version = &quot;1&quot;;\\n\\n    src = pkgs.fetchFromGitHub {\\n    owner = &quot;&quot;;\\n    repo = &quot;&quot;;\\n    ref = &quot;&quot;;\\n    hash = &quot;&quot;;\\n    };\\n\\n    # Whether to place plugin in /start or /opt\\n    optional = false;\\n\\n    # Plugins can have other plugins as dependencies\\n    # this is mainly used in nixpkgs\\n    # avoid it if possible\\n    dependencies = [];\\n  }\\n]\\n</pre></code>"},"loc":["programs","mnw","plugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.providers.nodeJs.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable and configure the Node.js provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","providers","nodeJs","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.nodeJs.neovimClientPackage":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.neovim-node-client</pre></code>"},"description":"<p>The neovim-node-client package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>pkgs.neovim-node-client</pre></code>"},"loc":["programs","mnw","providers","nodeJs","neovimClientPackage"],"readOnly":false,"type":"package"},"programs.mnw.providers.nodeJs.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.nodejs</pre></code>"},"description":"<p>The Node.js package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>pkgs.nodejs_23</pre></code>"},"loc":["programs","mnw","providers","nodeJs","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.perl.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable and configure the perl provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","providers","perl","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.perl.extraPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>p: [\\n  p.NeovimExt\\n  p.Appcpanminus\\n]\\n</pre></code>"},"description":"<p>Extra packages to be included in the perl environment.</p>\\n<p>Note: you probably want to include NeovimExt and Appcpanminus if you change this from it's default value.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>p: [\\n  p.NeovimExt\\n  p.Appcpanminus\\n]\\n</pre></code>"},"loc":["programs","mnw","providers","perl","extraPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.providers.perl.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.perl</pre></code>"},"description":"<p>The perl package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>pkgs.perl</pre></code>"},"loc":["programs","mnw","providers","perl","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.python3.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable and configure the python3 provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","providers","python3","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.python3.extraPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>p: [ ppynvim ]</pre></code>"},"description":"<p>Extra packages to be included in the python3 environment.</p>\\n<p>Note: you probably want to include pynvim if you change this from it's default value.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>py: [\\n  py.pynvim\\n  py.pybtex\\n]\\n</pre></code>"},"loc":["programs","mnw","providers","python3","extraPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.providers.python3.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.python3</pre></code>"},"description":"<p>The python3 package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>pkgs.python39</pre></code>"},"loc":["programs","mnw","providers","python3","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.ruby.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable and configure the ruby provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","providers","ruby","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.ruby.env":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>pkgs.bundlerEnv {\\n  name = &quot;neovim-ruby-env&quot;;\\n  gemdir = ../ruby_provider;\\n  postBuild = &apos;&apos;\\n    rm $out/bin/{bundle,bundler}\\n  &apos;&apos;;\\n}\\n</pre></code>"},"description":"","example":{"_type":"literalExpression","text":"<code><pre>pkgs.bundlerEnv {\\n  name = &quot;neovim-ruby-env&quot;;\\n  gemdir = ../ruby_provider;\\n}\\n</pre></code>"},"loc":["programs","mnw","providers","ruby","env"],"readOnly":false,"type":"package"},"programs.mnw.providers.ruby.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>programs.mnw.providers.ruby.env.ruby</pre></code>"},"description":"<p>The ruby package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>pkgs.ruby</pre></code>"},"loc":["programs","mnw","providers","ruby","package"],"readOnly":false,"type":"package"},"programs.mnw.vimlFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>VimL config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  (pkgs.writeText &quot;init.vim&quot; &apos;&apos;\\n    echomsg &apos;hello world&apos;\\n  &apos;&apos;)\\n]\\n</pre></code>"},"loc":["programs","mnw","vimlFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.wrapperArgs":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of arguments to be passed to makeWrapper</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  &quot;--set-default&quot;\\n  &quot;FZF_DEFAULT_OPTS&quot;\\n  &quot;--layout=reverse --inline-info&quot;\\n]\\n</pre></code>"},"loc":["programs","mnw","wrapperArgs"],"readOnly":false,"type":"list of string"}}`),L={class:"nixos-container"},q=["href","aria-label"],P=["innerHTML"],O={class:"nixos-props"},G={class:"nixos-value"},T=["innerHTML"],N=["innerHTML"],A=["innerHTML"],y=b({__name:"RenderDocs",props:{options:{},headingLevel:{},include:{},exclude:{}},setup(g){const t=g,s=t.headingLevel||"h3",w=Object.fromEntries(Object.entries(t.options).filter(([i,n])=>t.exclude!==void 0?Array.isArray(t.exclude)?!t.exclude.some(o=>o.test(i)):!t.exclude.test(i):t.include===void 0?!0:Array.isArray(t.include)?t.include.some(o=>o.test(i)):t.include.test(i)));return(i,n)=>(r(),a("div",L,[(r(!0),a(l,null,x(p(w),(o,m)=>(r(),a("div",null,[(r(),_(E(p(s)),{id:m,tabindex:"-1"},{default:k(()=>[c(u(m)+" ",1),e("a",{class:"header-anchor",href:`#${m}`,"aria-label":`Permalink to "${m}"`},"​",8,q)]),_:2},1032,["id"])),e("div",{innerHTML:o.description},null,8,P),e("div",O,[n[3]||(n[3]=e("span",null,"Type:",-1)),e("div",G,[e("code",null,u(o.type),1)]),o.default?(r(),a(l,{key:0},[n[0]||(n[0]=e("span",null,"Default:",-1)),e("div",{class:"nixos-value",innerHTML:o.default.text},null,8,T)],64)):d("",!0),o.example?(r(),a(l,{key:1},[n[1]||(n[1]=e("span",null,"Example:",-1)),e("div",{class:"nixos-value",innerHTML:o.example.text},null,8,N)],64)):d("",!0),o.declarations.length>=1?(r(),a(l,{key:2},[n[2]||(n[2]=e("span",null,"Declaration",-1)),(r(!0),a(l,null,x(o.declarations,v=>(r(),a("div",{class:"nixos-declaration",innerHTML:v},null,8,A))),256))],64)):d("",!0)])]))),256))]))}}),M={id:"frontmatter-title",tabindex:"-1"},j=JSON.parse('{"title":"Options","description":"","frontmatter":{"title":"Options"},"headers":[],"relativePath":"options.md","filePath":"options.md"}'),F={name:"options.md"},C=Object.assign(F,{setup(g){return(t,s)=>(r(),a("div",null,[e("h1",M,[c(u(t.$frontmatter.title)+" ",1),s[0]||(s[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),h(p(y),{options:p(f),exclude:/programs\.mnw\.providers\.*/},null,8,["options"]),s[1]||(s[1]=e("h2",{id:"provider-configuration",tabindex:"-1"},[c("Provider Configuration "),e("a",{class:"header-anchor",href:"#provider-configuration","aria-label":'Permalink to "Provider Configuration"'},"​")],-1)),h(p(y),{options:p(f),include:/programs\.mnw\.providers\.*/},null,8,["options"])]))}});export{j as __pageData,C as default};
