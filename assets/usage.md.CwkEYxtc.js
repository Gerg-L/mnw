import{_ as e,c as t,o as n,j as i,ag as l,a as p,t as h}from"./chunks/framework.uULrwFy5.js";const y=JSON.parse('{"title":"Usage","description":"","frontmatter":{"title":"Usage"},"headers":[],"relativePath":"usage.md","filePath":"usage.md"}'),r={name:"usage.md"},o={id:"frontmatter-title",tabindex:"-1"};function k(a,s,d,c,g,m){return n(),t("div",null,[i("h1",o,[p(h(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=l(`<p>Add the flake input</p><div class="language-nix vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nix</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mnw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;github:Gerg-L/mnw&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><p>or <code>import</code> the base of this repo which has <a href="https://github.com/edolstra/flake-compat" target="_blank" rel="noreferrer">flake-compat</a></p><p>Then use one of the modules or <code>mnw.lib.wrap</code></p><h3 id="wrapper-function" tabindex="-1">Wrapper function <a class="header-anchor" href="#wrapper-function" aria-label="Permalink to &quot;Wrapper function&quot;">​</a></h3><p>The wrapper takes two arguments:</p><ul><li>a valid instance of <code>pkgs</code> or a set of specialArgs, passed to the module <ul><li>the set must contain the aforementioned <code>pkgs</code> (to be used by the wrapper)!</li><li>the set can contain extra specialArgs you might need in the module (such as functions, collections of such, npins/niv pins, etc)</li></ul></li><li>a module, containing your setup</li></ul><div class="language-nix vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nix</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  neovim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mnw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wrap</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Your config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # or, if your config is a separate file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  neovim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mnw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wrap</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pkgs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./config.nix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # or, if you need extra specialArgs in your module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  neovim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mnw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inherit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inputs</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pkgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    myLib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./config.nix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><code>mnw.lib.wrap</code> uses <code>evalModules</code>, so you can use <code>imports</code>, <code>options</code>, and <code>config</code>!</p></div><p>Then add it to <code>environment.systemPackages</code> or <code>users.users.&lt;name&gt;.packages</code> or anywhere you can add a package</p><h3 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h3><p>Import <code>mnw.&lt;module&gt;.mnw</code> into your config</p><p>Where <code>&lt;module&gt;</code> is:</p><p><code>nixosModules</code> for NixOS,</p><p><code>darwinModules</code> for nix-darwin</p><p><code>homeManagerModules</code>for home-manager</p><p>Then use the <code>programs.mnw</code> options</p><div class="language-nix vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nix</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">programs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mnw</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #config options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">programs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mnw</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./config.nix</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">;</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><code>programs.mnw</code> is a submodule you can use <code>imports</code>, <code>options</code>, and <code>config</code>!</p></div><p>and mnw will install the wrapped neovim to <code>environment.systemPackages</code> or <code>home.packages</code></p><p>Alternatively set <code>programs.mnw.enable = false;</code> and add <code>config.programs.mnw.finalPackage</code> where you want manually</p><h3 id="dev-mode" tabindex="-1">Dev mode <a class="header-anchor" href="#dev-mode" aria-label="Permalink to &quot;Dev mode&quot;">​</a></h3><p>To setup hot reloading for quicker neovim config iteration:</p><p>Put your config plugin in <code>plugins.dev</code>,</p><p>Then you can use the <code>.devMode</code> attribute of the created neovim package!</p><p>See the examples below:</p><h3 id="lua-variables" tabindex="-1">Lua variables <a class="header-anchor" href="#lua-variables" aria-label="Permalink to &quot;Lua variables&quot;">​</a></h3><p>Currently mnw only has one lua global variable set</p><p><code>mnw</code> which is a table which contains <code>configDir</code></p><p>Which is the path to the generated config directory of mnw</p><p>You can build/view this directory by building the <code>.configDir</code> of the mnw package</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p><a href="https://github.com/Gerg-L/mnw/tree/master/examples/nixos" target="_blank" rel="noreferrer">Simple NixOS example</a></p><p><a href="https://github.com/Gerg-L/mnw/tree/master/examples/standalone" target="_blank" rel="noreferrer">Standalone, easy development</a></p><p><a href="https://github.com/Gerg-L/mnw/tree/master/examples/lazy" target="_blank" rel="noreferrer">Lazy loading with lazy.nvim</a></p><p><a href="https://github.com/Gerg-L/mnw/tree/master/examples/lz.n" target="_blank" rel="noreferrer">Lazy loading with lz.n</a></p><p><a href="https://github.com/Gerg-L/nvim-flake" target="_blank" rel="noreferrer">My Neovim flake</a></p><p><a href="https://github.com/NotAShelf/nvf" target="_blank" rel="noreferrer">nvf</a></p><p><a href="https://github.com/viperML/dotfiles/blob/master/packages/neovim" target="_blank" rel="noreferrer">viperML</a></p><p><a href="https://github.com/llakala/meovim" target="_blank" rel="noreferrer">llakala</a></p><p><a href="https://codeberg.org/adamcstephens/dotfiles/src/branch/main/apps/neovim" target="_blank" rel="noreferrer">adamcstephens</a></p><p><a href="https://github.com/HeitorAugustoLN/nvim-config" target="_blank" rel="noreferrer">HeitorAugustoLN</a></p><p>Make a PR to add your config 😄</p>`,43))])}const f=e(r,[["render",k]]);export{y as __pageData,f as default};
