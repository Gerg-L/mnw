import{d as y,c as r,o as t,F as a,B as u,b as f,j as e,w,a as g,t as i,H as v,k as m,e as l,G as b}from"./chunks/framework.BIxYopnG.js";const _=JSON.parse(`{"programs.mnw.aliases":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>Aliases to symlink nvim to.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  \\"vi\\"\\n  \\"vim\\"\\n]\\n</pre></code>"},"loc":["programs","mnw","aliases"],"readOnly":false,"type":"list of string"},"programs.mnw.appName":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"mnw\\"</pre></code>"},"description":"<p>What to set $NVIM_APPNAME to</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"gerg\\"</pre></code>"},"loc":["programs","mnw","appName"],"readOnly":false,"type":"string"},"programs.mnw.desktopEntry":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable neovim's desktop entry.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","desktopEntry"],"readOnly":false,"type":"boolean"},"programs.mnw.devExcludedPlugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>The same as 'plugins' except for when running in dev mode\\nadd the absolute paths to 'devPluginPaths'</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[ ./gerg ]\\n</pre></code>"},"loc":["programs","mnw","devExcludedPlugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.devPluginPaths":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>The impure absolute paths to nvim plugins\\nthe relative paths of which should be in devExcludedPlugins</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  \\"~/Projects/nvim-flake/gerg\\"\\n]\\n</pre></code>"},"loc":["programs","mnw","devPluginPaths"],"readOnly":false,"type":"list of string"},"programs.mnw.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable mnw (Minimal Neovim Wrapper).</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.extraBinPath":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>Extra packages to be put in neovim's PATH</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    pkgs.rg\\n    pkgs.fzf\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","extraBinPath"],"readOnly":false,"type":"list of package"},"programs.mnw.extraLuaPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><function></pre></code>"},"description":"<p>A function which returns a list of extra needed lua packages</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>ps: [ ps.jsregexp ]\\n</pre></code>"},"loc":["programs","mnw","extraLuaPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.finalPackage":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"description":"<p>The final package to be consumed by the user</p>\\n","loc":["programs","mnw","finalPackage"],"readOnly":true,"type":"package"},"programs.mnw.initLua":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>lua config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  require(\\"myConfig\\")\\n''</pre></code>"},"loc":["programs","mnw","initLua"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.initViml":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>VimL config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  echomsg 'hello world'\\n''</pre></code>"},"loc":["programs","mnw","initViml"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.luaFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>lua config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  (pkgs.writeText \\"init.lua\\" ''\\n    print('hello world')\\n  '')\\n]\\n</pre></code>"},"loc":["programs","mnw","luaFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.neovim":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation neovim-unwrapped-0.10.4></pre></code>"},"description":"<p>The neovim package to use. Must be unwrapped</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>inputs.neovim-nightly-overlay.packages.\${pkgs.stdenv.system}.default</pre></code>"},"loc":["programs","mnw","neovim"],"readOnly":false,"type":"package"},"programs.mnw.plugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of plugins to load</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  # you can pass vimPlugins from nixpkgs\\n  pkgs.vimPlugins.fzf-lua\\n  \\n  # You can pass a directory\\n  # this is recommend for using your own\\n  # ftplugins and treesitter queries\\n  ./myNeovimConfig\\n  \\n  {\\n    pname = \\"customPlugin\\";\\n    version = \\"1\\";\\n  \\n    src = pkgs.fetchFromGitHub {\\n     owner = \\"\\";\\n     repo = \\"\\";\\n     ref = \\"\\";\\n     hash = \\"\\";\\n    };\\n  \\n    # Whether to place plugin in /start or /opt\\n    optional = false;\\n  \\n    # Plugins can have other plugins as dependencies\\n    # this is mainly used in nixpkgs\\n    # avoid it if possible\\n    dependencies = [];\\n  \\n  \\n  }\\n''</pre></code>"},"loc":["programs","mnw","plugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.providers.nodeJs.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable and configure the Node.js provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","providers","nodeJs","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.nodeJs.neovimClientPackage":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation node-client-5.3.0></pre></code>"},"description":"<p>The neovim-node-client package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"pkgs.neovim-node-client\\"</pre></code>"},"loc":["programs","mnw","providers","nodeJs","neovimClientPackage"],"readOnly":false,"type":"package"},"programs.mnw.providers.nodeJs.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation nodejs-22.14.0></pre></code>"},"description":"<p>The Node.js package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"pkgs.nodejs_23\\"</pre></code>"},"loc":["programs","mnw","providers","nodeJs","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.perl.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable and configure the perl provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","providers","perl","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.perl.extraPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><function></pre></code>"},"description":"<p>Extra packages to be included in the perl environment.</p>\\n<p>Note: you probably want to include NeovimExt and Appcpanminus if you change this from it's default value.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>p: [\\n  p.NeovimExt\\n  p.Appcpanminus\\n]\\n</pre></code>"},"loc":["programs","mnw","providers","perl","extraPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.providers.perl.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation perl-5.40.0></pre></code>"},"description":"<p>The perl package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"pkgs.perl\\"</pre></code>"},"loc":["programs","mnw","providers","perl","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.python3.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable and configure the python3 provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","providers","python3","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.python3.extraPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><function></pre></code>"},"description":"<p>Extra packages to be included in the python3 environment.</p>\\n<p>Note: you probably want to include pynvim if you change this from it's default value.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>py: [\\n  py.pynvim\\n  py.pybtex\\n]\\n</pre></code>"},"loc":["programs","mnw","providers","python3","extraPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.providers.python3.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation python3-3.12.9></pre></code>"},"description":"<p>The python3 package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"pkgs.python39\\"</pre></code>"},"loc":["programs","mnw","providers","python3","package"],"readOnly":false,"type":"package"},"programs.mnw.providers.ruby.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable and configure the ruby provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","providers","ruby","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.providers.ruby.env":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation neovim-ruby-env></pre></code>"},"description":"","example":{"_type":"literalExpression","text":"<code><pre>pkgs.bundlerEnv {\\n  name = \\"neovim-ruby-env\\";\\n  gemdir = ../ruby_provider;\\n};\\n</pre></code>"},"loc":["programs","mnw","providers","ruby","env"],"readOnly":false,"type":"package"},"programs.mnw.providers.ruby.package":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation ruby-3.3.6></pre></code>"},"description":"<p>The ruby package to use.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"pkgs.ruby\\"</pre></code>"},"loc":["programs","mnw","providers","ruby","package"],"readOnly":false,"type":"package"},"programs.mnw.vimlFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>VimL config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  (pkgs.writeText \\"init.vim\\" ''\\n    echomsg 'hello world'\\n  '')\\n]\\n</pre></code>"},"loc":["programs","mnw","vimlFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.wrapperArgs":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of arguments to be passed to makeWrapper</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>[\\n  \\"--set-default\\"\\n  \\"FZF_DEFAULT_OPTS\\"\\n  \\"--layout=reverse --inline-info\\"\\n];\\n</pre></code>"},"loc":["programs","mnw","wrapperArgs"],"readOnly":false,"type":"list of string"}}`),k={class:"nixos-container"},E=["href","aria-label"],L=["innerHTML"],O={class:"nixos-props"},P={class:"nixos-value"},G=["innerHTML"],T=["innerHTML"],N=["innerHTML"],A=y({__name:"RenderDocs",props:{options:{},headingLevel:{}},setup(d){const s=d.headingLevel||"h3";return(x,n)=>(t(),r("div",k,[(t(!0),r(a,null,u(x.options,(o,p)=>(t(),r("div",null,[(t(),f(v(m(s)),{id:p,tabindex:"-1"},{default:w(()=>[g(i(p)+" ",1),e("a",{class:"header-anchor",href:`#${p}`,"aria-label":`Permalink to "${p}"`},"​",8,E)]),_:2},1032,["id"])),e("div",{innerHTML:o.description},null,8,L),e("div",O,[n[3]||(n[3]=e("span",null,"Type:",-1)),e("div",P,[e("code",null,i(o.type),1)]),o.default!==void 0?(t(),r(a,{key:0},[n[0]||(n[0]=e("span",null,"Default:",-1)),e("div",{class:"nixos-value",innerHTML:o.default.text},null,8,G)],64)):l("",!0),o.example!==void 0?(t(),r(a,{key:1},[n[1]||(n[1]=e("span",null,"Example:",-1)),e("div",{class:"nixos-value",innerHTML:o.example.text},null,8,T)],64)):l("",!0),o.declarations.length>=1?(t(),r(a,{key:2},[n[2]||(n[2]=e("span",null,"Declaration",-1)),(t(!0),r(a,null,u(o.declarations,h=>(t(),r("div",{class:"nixos-declaration",innerHTML:h},null,8,N))),256))],64)):l("",!0)])]))),256))]))}}),M={id:"frontmatter-title",tabindex:"-1"},W=JSON.parse('{"title":"Options","description":"","frontmatter":{"title":"Options"},"headers":[],"relativePath":"options.md","filePath":"options.md"}'),H={name:"options.md"},V=Object.assign(H,{setup(d){return(c,s)=>(t(),r("div",null,[e("h1",M,[g(i(c.$frontmatter.title)+" ",1),s[0]||(s[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),b(m(A),{options:m(_)},null,8,["options"])]))}});export{W as __pageData,V as default};
