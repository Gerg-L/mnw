import{d as f,c as n,o as t,F as a,B as u,b as y,j as e,w,a as g,t as p,H as _,k as m,e as i,G as b}from"./chunks/framework.BIxYopnG.js";const v=JSON.parse(`{"programs.mnw.appName":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"mnw\\"</pre></code>"},"description":"<p>What to set $NVIM_APPNAME to</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>\\"gerg\\"</pre></code>"},"loc":["programs","mnw","appName"],"readOnly":false,"type":"string"},"programs.mnw.desktopEntry":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable neovim's desktop entry.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","desktopEntry"],"readOnly":false,"type":"boolean"},"programs.mnw.devExcludedPlugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>The same as 'plugins' except for when running in dev mode\\nadd the absolute paths to 'devPluginPaths'</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    ./gerg\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","devExcludedPlugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.devPluginPaths":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>The impure absolute paths to nvim plugins\\nthe relative paths of which should be in devExcludedPlugins</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    \\"~/Projects/nvim-flake/gerg\\"\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","devPluginPaths"],"readOnly":false,"type":"list of string"},"programs.mnw.enable":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable mnw (Minimal Neovim Wrapper).</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","enable"],"readOnly":false,"type":"boolean"},"programs.mnw.extraBinPath":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>Extra packages to be put in neovim's PATH</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    pkgs.rg\\n    pkgs.fzf\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","extraBinPath"],"readOnly":false,"type":"list of package"},"programs.mnw.extraLuaPackages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><function></pre></code>"},"description":"<p>A function which returns a list of extra needed lua packages</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  ps: [ ps.jsregexp ]\\n''</pre></code>"},"loc":["programs","mnw","extraLuaPackages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.extraPython3Packages":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><function></pre></code>"},"description":"<p>A function which returns a list of extra needed python3 packages</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  py: [ py.pybtex ]\\n''</pre></code>"},"loc":["programs","mnw","extraPython3Packages"],"readOnly":false,"type":"function that evaluates to a(n) list of package"},"programs.mnw.finalPackage":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"description":"<p>The final package to be consumed by the user</p>\\n","loc":["programs","mnw","finalPackage"],"readOnly":true,"type":"package"},"programs.mnw.initLua":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>lua config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  require(\\"myConfig\\")\\n''</pre></code>"},"loc":["programs","mnw","initLua"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.initViml":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>\\"\\"</pre></code>"},"description":"<p>VimL config text to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  echomsg 'hello world'\\n''</pre></code>"},"loc":["programs","mnw","initViml"],"readOnly":false,"type":"strings concatenated with \\"\\\\n\\""},"programs.mnw.luaFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>lua config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    (pkgs.writeText \\"init.lua\\" '''\\n      print('hello world')\\n    ''')\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","luaFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.neovim":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre><derivation neovim-unwrapped-0.10.1></pre></code>"},"description":"<p>The neovim package to use. Must be unwrapped</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>inputs.neovim-nightly-overlay.packages.\${pkgs.stdenv.system}.default</pre></code>"},"loc":["programs","mnw","neovim"],"readOnly":false,"type":"package"},"programs.mnw.plugins":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of plugins to load</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  # you can pass vimPlugins from nixpkgs\\n  pkgs.vimPlugins.fzf-lua\\n  \\n  # You can pass a directory\\n  # this is recommend for using your own\\n  # ftplugins and treesitter queries\\n  ./myNeovimConfig\\n  \\n  {\\n    pname = \\"customPlugin\\";\\n    version = \\"1\\";\\n  \\n    src = pkgs.fetchFromGitHub {\\n     owner = \\"\\";\\n     repo = \\"\\";\\n     ref = \\"\\";\\n     hash = \\"\\";\\n    };\\n  \\n    # Whether to place plugin in /start or /opt\\n    optional = false;\\n  \\n    # Plugins can have other plugins as dependencies\\n    # this is mainly used in nixpkgs\\n    # avoid it if possible\\n    dependencies = [];\\n  \\n  \\n  }\\n''</pre></code>"},"loc":["programs","mnw","plugins"],"readOnly":false,"type":"list of (literal path or (attribute set of anything))"},"programs.mnw.viAlias":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable symlinking nvim to vi.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","viAlias"],"readOnly":false,"type":"boolean"},"programs.mnw.vimAlias":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable symlinking nvim to vim.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","vimAlias"],"readOnly":false,"type":"boolean"},"programs.mnw.vimlFiles":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>VimL config files to load at startup</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    (pkgs.writeText \\"init.vim\\" '''\\n      echomsg 'hello world'\\n    ''')\\n  ]\\n''</pre></code>"},"loc":["programs","mnw","vimlFiles"],"readOnly":false,"type":"list of path in the Nix store"},"programs.mnw.withNodeJs":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable configuring and enabling the node provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","withNodeJs"],"readOnly":false,"type":"boolean"},"programs.mnw.withPerl":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"description":"<p>Whether to enable configuring and enabling the perl provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"loc":["programs","mnw","withPerl"],"readOnly":false,"type":"boolean"},"programs.mnw.withPython3":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable configuring and enabling the python3 provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","withPython3"],"readOnly":false,"type":"boolean"},"programs.mnw.withRuby":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>true</pre></code>"},"description":"<p>Whether to enable configuring and enabling the ruby provider.</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>false</pre></code>"},"loc":["programs","mnw","withRuby"],"readOnly":false,"type":"boolean"},"programs.mnw.wrapperArgs":{"declarations":["<a href=\\"https://github.com/Gerg-L/mnw/tree/master/modules/common.nix\\">&lt;mnw/modules/common.nix&gt;</a>"],"default":{"_type":"literalExpression","text":"<code><pre>[ ]</pre></code>"},"description":"<p>A list of arguments to be passed to makeWrapper</p>\\n","example":{"_type":"literalExpression","text":"<code><pre>''\\n  [\\n    \\"--set-default\\"\\n    \\"FZF_DEFAULT_OPTS\\"\\n    \\"--layout=reverse --inline-info\\"\\n  ];\\n''</pre></code>"},"loc":["programs","mnw","wrapperArgs"],"readOnly":false,"type":"list of string"}}`),E={class:"nixos-container"},k=["href","aria-label"],L=["innerHTML"],P={class:"nixos-props"},O={class:"nixos-value"},G=["innerHTML"],T=["innerHTML"],N=["innerHTML"],A=f({__name:"RenderDocs",props:{options:{},headingLevel:{}},setup(d){const s=d.headingLevel||"h3";return(x,o)=>(t(),n("div",E,[(t(!0),n(a,null,u(x.options,(r,l)=>(t(),n("div",null,[(t(),y(_(m(s)),{id:l,tabindex:"-1"},{default:w(()=>[g(p(l)+" ",1),e("a",{class:"header-anchor",href:`#${l}`,"aria-label":`Permalink to "${l}"`},"​",8,k)]),_:2},1032,["id"])),e("div",{innerHTML:r.description},null,8,L),e("div",P,[o[3]||(o[3]=e("span",null,"Type:",-1)),e("div",O,[e("code",null,p(r.type),1)]),r.default!==void 0?(t(),n(a,{key:0},[o[0]||(o[0]=e("span",null,"Default:",-1)),e("div",{class:"nixos-value",innerHTML:r.default.text},null,8,G)],64)):i("",!0),r.example!==void 0?(t(),n(a,{key:1},[o[1]||(o[1]=e("span",null,"Example:",-1)),e("div",{class:"nixos-value",innerHTML:r.example.text},null,8,T)],64)):i("",!0),r.declarations.length>=1?(t(),n(a,{key:2},[o[2]||(o[2]=e("span",null,"Declaration",-1)),(t(!0),n(a,null,u(r.declarations,h=>(t(),n("div",{class:"nixos-declaration",innerHTML:h},null,8,N))),256))],64)):i("",!0)])]))),256))]))}}),M={id:"frontmatter-title",tabindex:"-1"},F=JSON.parse('{"title":"Options","description":"","frontmatter":{"title":"Options"},"headers":[],"relativePath":"options.md","filePath":"options.md"}'),W={name:"options.md"},V=Object.assign(W,{setup(d){return(c,s)=>(t(),n("div",null,[e("h1",M,[g(p(c.$frontmatter.title)+" ",1),s[0]||(s[0]=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),b(m(A),{options:m(v)},null,8,["options"])]))}});export{F as __pageData,V as default};
